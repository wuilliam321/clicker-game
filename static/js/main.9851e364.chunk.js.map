{"version":3,"sources":["components/CreatePlayer.tsx","components/Feedback.tsx","shared/constants.ts","components/Clicker.tsx","components/Actions.tsx","components/GameContainer.tsx","components/GameViewPort.tsx","ClickerGame.tsx","serviceWorker.ts","index.tsx"],"names":["CreatePlayer","_ref","setPlayerNameHandler","_useState","useState","_useState2","Object","slicedToArray","name","setName","react_default","a","createElement","className","htmlFor","type","id","value","placeholder","onChange","e","target","onClick","Feedback","content","score","Clicker","setPlayerScoreHandler","disabled","Actions","GameContainer","clickerProps","components_Feedback","components_Clicker","components_Actions","GameViewPort","props","createPlayerProps","components_GameContainer","components_CreatePlayer","ClickerGame","won","player","setPlayer","gameProps","prevState","objectSpread","newScore","setPlayerWonHandler","components_GameViewPort","Boolean","window","location","hostname","match","ReactDOM","render","src_ClickerGame_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9851e364.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport CreatePlayerProps from \"../interfaces/CreatePlayerProps\";\n\n// TODO: Maybe we need to pass the name to make it testable,\n// and do not use setName because it is a presentational component\nconst CreatePlayer: React.FC<CreatePlayerProps> = ({\n  setPlayerNameHandler\n}) => {\n  const [name, setName] = useState(\"\");\n  const setNameHandler = (e: React.ChangeEvent<HTMLInputElement>) =>\n    setName(e.target.value);\n\n  return (\n    <div className=\"Game-create-player\">\n      <h1>What's your name</h1>\n      <label htmlFor=\"name\">\n        Your name:\n        <input\n          type=\"text\"\n          name=\"name\"\n          id=\"name\"\n          value={name}\n          placeholder=\"Guess\"\n          onChange={setNameHandler}\n        />\n        <button id=\"start-btn\" onClick={() => setPlayerNameHandler(name)}>\n          Start\n        </button>\n      </label>\n    </div>\n  );\n};\n\nexport default CreatePlayer;\n","import React from \"react\";\nimport { WinnerScore } from \"../shared/constants\";\n\nconst Feedback: React.FC<{ score: number }> = ({ score }) => {\n  let content;\n  if (score === WinnerScore) {\n    content = <p>You have won!</p>;\n  }\n  return <div className=\"Game-feedback\">{content}</div>;\n};\n\nexport default Feedback;\n","export const WinnerScore = 10;","import React from \"react\";\nimport ClickerProps from \"../interfaces/ClickerProps\";\nimport { WinnerScore } from \"../shared/constants\";\n\nconst Clicker: React.FC<ClickerProps> = ({ score, setPlayerScoreHandler }) => {\n  const setScoreHandler = () => setPlayerScoreHandler();\n  return (\n    <div className=\"Game-clicker\">\n      <button\n        id=\"clicker-btn\"\n        disabled={score === WinnerScore}\n        onClick={setScoreHandler}\n      >\n        {score}\n      </button>\n    </div>\n  );\n};\n\nexport default Clicker;\n","import React from \"react\";\n\nconst Actions: React.FC = () => {\n  return <div className=\"Game-actions\" />;\n};\n\nexport default Actions;\n","import React from \"react\";\nimport Feedback from \"./Feedback\";\nimport Clicker from \"./Clicker\";\nimport Actions from \"./Actions\";\nimport GameProps from \"../interfaces/GameProps\";\nimport ClickerProps from \"../interfaces/ClickerProps\";\n\nconst GameContainer: React.FC<GameProps> = ({\n  name,\n  score,\n  setPlayerScoreHandler\n}) => {\n  const clickerProps: ClickerProps = {\n    score: score,\n    setPlayerScoreHandler: setPlayerScoreHandler\n  };\n  return (\n    <div className=\"Game-game-container\">\n      <h2>Welcome {name}!</h2>\n      <Feedback score={score} />\n      <Clicker {...clickerProps} />\n      <Actions />\n    </div>\n  );\n};\n\nexport default GameContainer;\n","import React from \"react\";\nimport CreatePlayer from \"./CreatePlayer\";\nimport GameContainer from \"./GameContainer\";\nimport GameProps from \"../interfaces/GameProps\";\nimport CreatePlayerProps from \"../interfaces/CreatePlayerProps\";\n\nconst GameViewPort: React.FC<GameProps> = props => {\n  const { name, setPlayerNameHandler } = props;\n  const createPlayerProps: CreatePlayerProps = {\n    setPlayerNameHandler: setPlayerNameHandler\n  };\n  let content;\n\n  if (name) {\n    content = <GameContainer {...props} />;\n  } else {\n    content = <CreatePlayer {...createPlayerProps} />;\n  }\n\n  return <div className=\"Game-viewport\">{content}</div>;\n};\n\nexport default GameViewPort;\n","import React, { useState } from \"react\";\nimport \"./ClickerGame.scss\";\nimport GameViewPort from \"./components/GameViewPort\";\nimport Player from \"./interfaces/Player\";\nimport GameProps from \"./interfaces/GameProps\";\nimport { WinnerScore } from \"./shared/constants\";\n\nconst ClickerGame: React.FC = () => {\n  const initialValue: Player = { name: \"\", score: 0, won: false };\n  const [player, setPlayer] = useState(initialValue);\n\n  const setPlayerName = (name: string) => {\n    setPlayer(prevState => ({ ...prevState, name: name }));\n  };\n\n  const setPlayerScore = () => {\n    setPlayer(prevState => {\n      const newScore =\n        prevState.score < WinnerScore ? prevState.score + 1 : WinnerScore;\n      return { ...prevState, score: newScore };\n    });\n  };\n\n  const setPlayerWon = () => {\n    setPlayer(prevState => ({ ...prevState, score: 0, won: true }));\n  };\n\n  const gameProps: GameProps = {\n    name: player.name,\n    score: player.score,\n    setPlayerNameHandler: setPlayerName,\n    setPlayerScoreHandler: setPlayerScore,\n    setPlayerWonHandler: setPlayerWon\n  };\n\n  return (\n    <div className=\"ClickerGame\">\n      <GameViewPort {...gameProps} />\n      <pre>player name: {player.name}</pre>\n      <pre>player score: {player.score}</pre>\n      <pre>player won?: {player.won ? \"Winner\" : \"Not yet\"}</pre>\n    </div>\n  );\n};\n\nexport default ClickerGame;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport ClickerGame from './ClickerGame';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<ClickerGame />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}